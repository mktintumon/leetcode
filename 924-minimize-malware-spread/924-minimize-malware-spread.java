class Solution {
    int[] parent;
    int[] size;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        // filling parent and size array
        for(int i = 0; i < graph.length; i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        // Making DSU 
        for(int i=0 ; i<graph.length ; i++){
            for(int j=0 ; j<graph.length ; j++){
                if(i != j && graph[i][j] == 1){
                    union(i , j);
                }
            }
        }
        
        // marking count of infected vertex in each components
        int[] infected = new int[graph.length];
        for(int i : initial){
            int parentIdx = find(i);
            infected[parentIdx]++;
        }
        
        Arrays.sort(initial);
        
        // potential ans start with initial[0] -> given
        int myAns = initial[0];
        int mySize = 0;
        
        for(int i : initial){
            int parentIdx = find(i);
            
            // we consider only comp which is largest and having only one infected
            if(infected[parentIdx] == 1){
                if(size[parentIdx] > mySize){
                    myAns = i;
                    mySize = size[parentIdx];
                }
            }
        }
        
        return myAns;
    }
    
    public int find(int x){
        if(parent[x] == x){
            return x;
        }
        else{
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    public void union(int x , int y){
        int xLead = find(x);
        int yLead = find(y);
        
        if(xLead != yLead){
            
            if(size[xLead] < size[yLead]){
                parent[xLead] = yLead;
                size[yLead] += size[xLead];
            } else{
                parent[yLead] = xLead;
                size[xLead] += size[yLead];
            }
        }
    }
}